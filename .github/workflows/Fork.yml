name: Fork Filter lists

on:
  workflow_dispatch:
  schedule:
    - cron: "30 * * * *"
  
jobs:
  Fork-FLITER-list:
    runs-on: ubuntu-latest
    env:
      TZ: 'Asia/Shanghai'
    
    steps: 
    - name: Checkout target repository
      uses: actions/checkout@v4.1.0

    # 拉取文件
    - name: 复刻
      run: |
        # 删除Egern/Rule目录下的所有文件
        rm -rf Egern/Rule/*  
        # 创建Egern/Rule目录
        mkdir -p Egern/Rule  
        # 克隆目标仓库到临时目录BM7_Tmp
        git clone https://github.com/blackmatrix7/ios_rule_script.git BM7_Tmp  
        # 复制Surge目录下的所有文件到Egern/Rule目录
        cp -r BM7_Tmp/rule/Surge/* Egern/Rule  
        # 删除临时目录BM7_Tmp
        rm -rf BM7_Tmp  

    # 改名
    - name: Rename
      run: |
        cd Egern/Rule
        # 查找所有扩展名为.list的文件，并将其重命名为.yaml
        find . -type f -name '*.list' -exec sh -c 'mv "$1" "${1%.list}.yaml"' sh {} \;

    # 适配 egern 规则 
    - name: 编辑
      run: |
        cd Egern/Rule
        find . -type f -name '*.yaml' -print0 | while IFS= read -r -d $'\0' file; do
          if [ -f "$file" ]; then
            # 适配规则
            sed -i -e 's/, /,/g' \
                   -e 's/;/# /g' \
                   -e 's/host,/HOST,/g' \
                   -e 's/host-/HOST-/g' \
                   -e 's/-suffix/-SUFFIX/g' \
                   -e 's/-keyword/-KEYWORD/g' \
                   -e 's/ip-cidr/IP-CIDR/g' \
                   -e 's/geoip/GEOIP/g' \
                   -e 's/HOST,/DOMAIN,/g' \
                   -e 's/HOST-/DOMAIN-/g' \
                   -e 's/IP6-CIDR,/IP-CIDR6,/g' \
                   -e 's/,extended-matching$//g' \
                   -e 's/,REJECT$//g' \
                   -e 's/,DIRECT$//g' \
                   -e 's/,reject$//g' \
                   -e 's/,direct$//g' \
                   -e '/\(USER-AGENT\|OR\|AND\|NOT\),/ s/^/#/' \
                   -e 's| \{1,\}//.*$||' \
                   -e 's/,\*/,.*/g' \
                   -e '/# 更新：/d' \
                   -e '/# AUTHOR:/d' \
                   -e '/# REPO:/d' \
                   -e '/# UPDATED:/d' \
                   -e '/404: Not Found/d' \
                   "$file"

            # 复制文件内容到临时文件
            cp "$file" tmpfile

            domain_set=""
            domain_suffix_set=""
            domain_keyword_set=""
            domain_regex_set=""
            ip_cidr_set=""
            ip_cidr6_set=""
            asn_set=""
            url_regex_set=""

            # 处理规则，将匹配的行添加到相应的集合中
            awk -F, '
              BEGIN {
                domain_count = 0
                domain_suffix_count = 0
                domain_keyword_count = 0
                domain_regex_count = 0
                ip_cidr_count = 0
                ip_cidr6_count = 0
                asn_count = 0
                url_regex_count = 0
              }
              /^DOMAIN,/ {domain_set = domain_set "\n- " $2; domain_count++}
              /^DOMAIN-SUFFIX,/ {domain_suffix_set = domain_suffix_set "\n- " $2; domain_suffix_count++}
              /^DOMAIN-KEYWORD,/ {domain_keyword_set = domain_keyword_set "\n- " $2; domain_keyword_count++}
              /^DOMAIN-WILDCARD,/ {domain_regex_set = domain_regex_set "\n- " $2; domain_regex_count++}
              /^IP-CIDR,/ {ip_cidr_set = ip_cidr_set "\n- " $2; ip_cidr_count++}
              /^IP-CIDR6,/ {ip_cidr6_set = ip_cidr6_set "\n- " $2; ip_cidr6_count++}
              /^IP-ASN,/ {asn_set = asn_set "\n- '\''" $2 "'\''"; asn_count++}
              /^URL-REGEX,/ {url_regex_set = url_regex_set "\n- '\''" $2 "'\''"; url_regex_count++}
            END {
              total_count = domain_count + domain_suffix_count + domain_keyword_count + domain_regex_count + ip_cidr_count + ip_cidr6_count + asn_count + url_regex_count

              print "# 规则名称：" folder_name
              print "# 规则统计：总数量=" total_count
              if (domain_count > 0) print "# 规则统计：DOMAIN 数量=" domain_count
              if (domain_suffix_count > 0) print "# 规则统计：DOMAIN-SUFFIX 数量=" domain_suffix_count
              if (domain_keyword_count > 0) print "# 规则统计：DOMAIN-KEYWORD 数量=" domain_keyword_count
              if (domain_regex_count > 0) print "# 规则统计：DOMAIN-WILDCARD 数量=" domain_regex_count
              if (ip_cidr_count > 0) print "# 规则统计：IP-CIDR 数量=" ip_cidr_count
              if (ip_cidr6_count > 0) print "# 规则统计：IP-CIDR6 数量=" ip_cidr6_count
              if (asn_count > 0) print "# 规则统计：IP-ASN 数量=" asn_count
              if (url_regex_count > 0) print "# 规则统计：URL-REGEX 数量=" url_regex_count
              if (domain_set) print "domain_set:" domain_set
              if (domain_suffix_set) print "domain_suffix_set:" domain_suffix_set
              if (domain_keyword_set) print "domain_keyword_set:" domain_keyword_set
              if (domain_regex_set) print "domain_regex_set:" domain_regex_set
              if (ip_cidr_set) print "ip_cidr_set:" ip_cidr_set
              if (ip_cidr6_set) print "ip_cidr6_set:" ip_cidr6_set
              if (asn_set) print "asn_set:" asn_set
              if (url_regex_set) print "url_regex_set:" url_regex_set
            }
            ' folder_name="$(basename "$(dirname "$file")")" tmpfile > "$file"

          else
            echo "$file not found."
          fi
        done
        # 循环结束后删除tmpfile
        rm tmpfile

    # 添加 no_resolve
    - name: Add no_resolve
      run: |
        cd Egern/Rule
        # 查找所有扩展名为 .yaml 的文件，并逐一进行编辑
        find . -type f -name '*.yaml' -print0 | while IFS= read -r -d $'\0' file; do
          if [ -f "$file" ]; then
            # 检查文件内容中是否包含 IP 规则列表中的任何模式
            if grep -E -q "(ip_cidr|ip_cidr6|ip_cidr_set|ip_cidr6_set)" "$file"; then
              # 在最后一条规则统计注释的下一行添加 no_resolve: true，并将所有规则集移到 no_resolve: true 之后
              awk '{
                if (match($0, /^# 规则统计/)) {
                  last = NR
                }
                if (last && NR > last) {
                  rules = rules "\n" $0
                } else {
                  print
                }
              } END {
                if (last) {
                  print "no_resolve: true" rules
                }
              }' "$file" > tmpfile && mv tmpfile "$file"
            else
              # 如果不需要添加 no_resolve: true，则将所有规则集在最后一条规则统计注释的下一行开始
              awk '{
                if (match($0, /^# 规则统计/)) {
                  last = NR
                }
                if (last && NR > last) {
                  rules = rules "\n" $0
                } else {
                  print
                }
              } END {
                if (last) {
                  print rules
                }
              }' "$file" > tmpfile && mv tmpfile "$file"
            fi
          else
            echo "$file not found."
          fi
        done

    # 编辑 README 文件
    - name: Edit README
      run: |
        cd Egern/Rule
        find . -type f -name 'README.md' -print0 | while IFS= read -r -d $'\0' readme; do
          if [ -f "$readme" ]; then
            # 删除和替换指定的字符串
            sed -i -e '/\*\*MASTER分支 CDN (每日更新)\*\*/d' \
                   -e '/\*\*MASTER分支 GHProxy (每日更新)\*\*/d' \
                   -e '/\(不定时更新\)/d' \
                   -e '/blackmatrix7\/ios_rule_script\/release\/rule\/Surge/d' \
                   -e '/https:\/\/cdn.jsdelivr.net/d' \
                   -e '/https:\/\/ghproxy.com/d' \
                   -e 's|MASTER分支|X分支|g' \
                   -e 's|## Surge|## Egern|g' \
                   -e 's|blackmatrix7/ios_rule_script/master/rule/Surge|hulesley/Personal/X/Egern/Rule|g' \
                   -e 's|github.com/blackmatrix7/ios_rule_script/tree/master/rule/Surge|github.com/hulesley/Personal/tree/X/Egern/Rule|g' \
                   -e 's|HOST|DOMAIN|g' \
                   -e 's|IP6-CIDR|IP-CIDR6|g' \
                   -e 's|USER-AGENT|USER-AGENT(Egern不支持)|g' \
                   -e 's|TOTAL|TOTAL(仅供参考)|g' \
                   -e 's|Surge定制化规则|Egern定制化规则|g' \
                   -e 's|hulesley/Personal/X/Egern/Rule/\(.*\)\.list|hulesley/Personal/X/Egern/Rule/\1.yaml|g' \
                   -e 's|-\([[:space:]]*\)\([A-Za-z0-9_]*\)\.list|-\1\2.yaml|' \
                   "$readme"
          else
            echo "$readme not found."
          fi
        done

    # 提交并推送更改
    - name: Add and Commits
      run: |
        if [[ -n $(git status -s) ]]; then
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add -A
          git commit -m "Auto Update $(TZ='Asia/Shanghai' date +'%Y-%m-%d %H:%M')"
          git push
        else
          echo "No changes to commit."
        fi

    # 清理工作流运行记录
    - name: Cleanup Workflow
      uses: Mattraks/delete-workflow-runs@main
      with:
        retain_days: 0
        keep_minimum_runs: 2  # 保留至少两个工作流运行记录
